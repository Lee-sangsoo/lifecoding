1. ajax는 보안성 문제로 인해 서버를 통해 웹 페이지를 열어야지만 사용이 가능하다.
	ㄴ ajax 공부는 내 컴퓨터의 apache 서버를 통해 진행된다.

2. ajax를 사용하면 단 하나의 페이지를 통해서 모든 정보를 확인 가능한 Single Page Application
   구현이 가능하다 (SPA)

3. ajax를 구성하는 기능 중 하나로 'fetch' 라는 기능이 있다.
	이는 다음과 같이 사용한다.
	fetch('파일명').then(function(response){
	 response.text().then(function(text){
	  document.querySelector('태그명').innerHTML = text;
	 })
	})
	<분석>
	fetch('html') = 클라이언트측에서 서버에게 html이라는 파일을 달라고 요청하는 것
	then(함수) = 서버에서 응답이 완료되면, 함수를 실행시켜라 (응답이 완료되기 까지 아무것도 하지 않으면 비효율적이기 때문)
		이런 방식을 Asynchronous(비동기적) 통신이라고 하며, ajax의 a가 이것이다.
	then 내부 = 익명 함수
	response = fetch로 응답받은 웹서버로 부터의 내용(결과)를 가지고 있는 '객체'
		이 안에 404 Not found, 200(정상) 304(수정내용없음) 등이 들어있다.

4. hash => url을 통해 페이지의 특정 문단에 접근하도록 하는 기능(bookmark)
	-> 기존url#id명 
	-> id를 부여한 태그 부분으로 사용 가능하며, url에 #id명을 통해 해당 부분으로 바로 스크롤을 이동가능하다.
	-> 마찬가지로 a태그를 통해 링크로서 사용도 가능하다.

5. window.location.hash를 통해(window는 없어도 된다고 한다) 현재 url의 해시값을 가져올 수 있다.

6. 해시값 중 #을 지우고 싶다면 -> location.hash.substr(1) -> #three 에서 1부터 가져온다 = three

7. 기존 onclick만 있던 리스트 들을 링크로 만들고 싶다면 -> href="#!html" 을 추가한다.
	ㄴ #은 기본적으로 북마크를 표시하는 기능이기 때문에 !을 붙여 해시를 표현해준다.
	ㄴ #!를 보고 해시 뱅 이라고 한다고 한다.

8. ajax에는 문제점이 많다 예를 들면 url에 필요없는 수식언이 붙는다던가 예쁘지 않게 되는 문제점과
   이 기능은 네트워크가 에러가 나서 javascript가 발생하지 않으면 페이지가 동작하지 않는다.
   이는 페이지의 원시성을 침해한다 (페이지의 원시성 : html 하나만으로 정상 작동이 되어야 한다)
   ㄴ 이를 개선한 방법이 pjax라는 것이 있다 (필요하면 찾아보자)

9. ajax를 이용하면 기존의 index.html에 있는 list의 내용이라던가, welcome, html, css, ... 등의
   내용에 변경이 있을 때, 해당 부분을 수정하고 고치고 확인하고 할 필요가 없이
   따로 해당 부분의 파일을 만들어 해당 파일만 수정하면 되는 편리성을 가지게 된다.

10. ajax의 해시 기능은 모두 href="#!---" 을 통해 구현된다. 
	ㄴ 해당 부분을 보여주는 -> location.hash를 통해

11. 리스트를 구성하는 list 파일 내부에서 해당 파일을 <li> 태그와 <a> 태그를 사용하여 표현하여도 되지만,
     기본적으로 이 또한 여러번 반복되는 작업이기 때문에 비효율적이다. 
     이를 효율적으로 만들기 위해 list 파일을 태그를 모두 삭제한 "html,css,javascript" 와 같이 구성한 다음
     1. "split"을 이용하여 배열에 저장하고
     2. 배열의 마지막 인덱스에는 개행 문자도 포함이 되기 때문에 "trim"을 이용하여 제거한다.
     3. 후에 tag를 담은 문자열과 배열의 값들을 이용하여 태그를 구성하고 이 값을 innerHTML을 사용하여 넣어준다.

12.  










